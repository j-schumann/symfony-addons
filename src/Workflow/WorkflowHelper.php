<?php

declare(strict_types=1);

namespace Vrok\SymfonyAddons\Workflow;

use Symfony\Component\Workflow\TransitionBlocker;
use Symfony\Component\Workflow\WorkflowInterface;

/**
 * Contains re-usable functions supporting symfony workflows.
 */
abstract class WorkflowHelper
{
    /**
     * Returns a list of transitions that are (theoretically) possible from the
     * current state of the given object, together with a list of blockers if
     * there are any.
     *
     * @return array [transitionName => ['blockers' => [code => message]]]
     */
    public static function getTransitionList(object $object, WorkflowInterface $workflow): array
    {
        // We have to inject the correct Workflow as there is no (longer a) valid method
        // to get the Workflow matching to an object: The WorkflowRegistry is now marked
        // internal/deprecated and so are the WorkflowSupportStrategies. There is no way
        // to access the SupportStrategies generated by the frameworkBundle, they are not
        // linked to the workflow or its definition.
        // There is no generic way to leverage a TaggedLocator|Iterator, that injects all
        // workflows, as we cannot reliably guess the correct service name: We don't know
        // the marking property's name and whether to workflow is registered with supports
        // pointing to the implementing class or a parent class, we would have to use
        // conventions: [class_name]_[marking_name] etc.

        $definition = $workflow->getDefinition();
        $transitionList = [];

        foreach ($definition->getTransitions() as $transition) {
            $places = array_keys($workflow->getMarking($object)->getPlaces());
            if (!array_intersect($places, $transition->getFroms())) {
                continue;
            }

            $transitionData = [
                'blockers' => [],
            ];

            $blockerList = $workflow->buildTransitionBlockerList($object, $transition->getName());
            foreach ($blockerList as $blocker) {
                /* @var TransitionBlocker $blocker */
                $transitionData['blockers'][$blocker->getCode()] = $blocker->getMessage();
            }

            $transitionList[$transition->getName()] = $transitionData;
        }

        return $transitionList;
    }
}
